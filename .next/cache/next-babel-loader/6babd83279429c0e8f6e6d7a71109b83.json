{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport \"antd/lib/icon/style\";\nimport _Icon from \"antd/lib/icon\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"E:\\\\project\\\\react\\\\ssr\\\\create-next-app\\\\create-next-app\\\\components\\\\splitter\\\\index.js\";\nvar __jsx = React.createElement;\nimport SplitterLayout from 'react-splitter-layout';\nimport 'react-splitter-layout/lib/index.css';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './index.less';\nvar splitterLineSize = 16,\n    // 缓存中的标识，含有'disabledDrag'时只有主板块\ndisabledDrag = 'disabledDrag';\n\nvar Splitter =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Splitter, _Component);\n\n  function Splitter(props) {\n    var _this;\n\n    _classCallCheck(this, Splitter);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Splitter).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"secondaryIndex\", function () {\n      var secondaryIndex;\n      _this.props.primaryIndex === 0 ? secondaryIndex = 1 : secondaryIndex = 0;\n      return secondaryIndex;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getInitSize\", function () {\n      _this.storageValue = localStorage.getItem(_this.props.storageName);\n      var secondaryInitialSize = _this.props.secondaryInitialSize;\n\n      if (_this.storageValue && _this.storageValue.includes(disabledDrag)) {\n        _this.disabledDrag = true;\n        return _this.foldSize;\n      } else if (_this.storageValue) {\n        return _parseInt(_this.storageValue);\n      } else if (secondaryInitialSize) {\n        return _parseInt(secondaryInitialSize);\n      } else {\n        return undefined;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"addButtonEvent\", function () {\n      var direction, opposite;\n      var vertical = _this.props.vertical;\n      var secondaryIndex = _this.state.secondaryIndex;\n\n      if (vertical) {\n        if (secondaryIndex === 1) {\n          if (_this.storageValue && _this.storageValue.includes(disabledDrag)) {\n            direction = 'top';\n            opposite = 'bottom';\n          } else {\n            direction = 'bottom';\n            opposite = 'top';\n          }\n        } else if (secondaryIndex === 0) {\n          if (_this.storageValue && _this.storageValue.includes(disabledDrag)) {\n            direction = 'bottom';\n            opposite = 'top';\n          } else {\n            direction = 'top';\n            opposite = 'bottom';\n          }\n        } // 垂直预览的 className\n\n\n        _this.previewClassName = 'preview-secondaryDom-vertical';\n\n        _this.splitterButton.onclick = function () {\n          return _this.onSplitterButton(direction, opposite);\n        };\n      } else {\n        if (secondaryIndex === 1) {\n          if (_this.storageValue && _this.storageValue.includes(disabledDrag)) {\n            direction = 'left';\n            opposite = 'right';\n          } else {\n            direction = 'right';\n            opposite = 'left';\n          }\n        } else if (secondaryIndex === 0) {\n          if (_this.storageValue && _this.storageValue.includes(disabledDrag)) {\n            direction = 'right';\n            opposite = 'left';\n          } else {\n            direction = 'left';\n            opposite = 'right';\n          }\n        } // 水平预览的 className\n\n\n        _this.previewClassName = 'preview-secondaryDom-horizontal';\n\n        _this.splitterButton.onclick = function () {\n          return _this.onSplitterButton(direction, opposite);\n        };\n      }\n\n      _this.splitterButton.classList.add(direction);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSplitterButton\", function (direction, opposite) {\n      var storageName = _this.props.storageName;\n      var _this$state = _this.state,\n          visibleFold = _this$state.visibleFold,\n          visibleContent = _this$state.visibleContent;\n\n      _this.setState({\n        visibleFold: !visibleFold,\n        visibleContent: !visibleContent\n      });\n\n      if (_this.secondaryDom.style[_this.size] === \"\".concat(_this.foldSize, \"px\")) {\n        _this.disabledDrag = false;\n        _this.secondaryDom.style[_this.size] = \"\".concat(_this[\"secondary\".concat(_this.upSize)], \"px\"); // this.secondaryWidth, this.secondaryHeight\n\n        _this.splitterLine.style.cssText = 'pointer-events: auto';\n      } else {\n        _this.disabledDrag = true; // 存储次板块宽度，折叠宽度设置为提示面板的宽度\n\n        _this[\"secondary\".concat(_this.upSize)] = _parseInt(_this.secondaryDom.style[_this.size]); // 收起次板块时保存尺寸，用于初次渲染时还原\n\n        storageName && localStorage.setItem(storageName, \"\".concat(_this[\"secondary\".concat(_this.upSize)]).concat(disabledDrag));\n        _this.secondaryDom.style[_this.size] = \"\".concat(_this.foldSize, \"px\");\n        _this.splitterLine.style.cssText = 'pointer-events: none';\n        _this.splitterButton.style.cssText = 'pointer-events: auto'; // fix：修改宽度为0，调整浏览器高度后，次板块宽度会改变为最小宽度。\n\n        _this.setState({\n          secondaryMinSize: _this.foldSize\n        });\n      }\n\n      _this.secondaryDom.classList.remove(_this.previewClassName);\n\n      _this.splitterButton.classList.remove(direction);\n\n      _this.splitterButton.classList.add(opposite);\n\n      _this.splitterButton.onclick = function () {\n        return _this.onSplitterButton(opposite, direction);\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFold\", function (direction) {\n      var visibleContent = _this.state.visibleContent;\n\n      _this.setState({\n        visibleContent: !visibleContent\n      }); // 当次板块内容显示时，点击折叠收起内容。尺寸等于折叠面板\n\n\n      if (visibleContent) {\n        _this.secondaryDom.style.cssText = \"\".concat(_this.size, \": \").concat(_this.foldSize, \"px\");\n        setTimeout(function () {\n          _this.secondaryDom.classList.remove(_this.previewClassName);\n        });\n      } else {\n        // 当次板块内容不显示时，点击展开显示内容。尺寸还原\n        _this.secondaryDom.classList.add(_this.previewClassName);\n\n        _this.secondaryDom.style.cssText = \"\".concat(_this.size, \": \").concat(_this[\"secondary\".concat(_this.upSize)]); // width: this.secondaryWidth\n      } // 设置展开时预览窗口的位置\n\n\n      document.querySelector(\".\".concat(_this.previewClassName)).style[\"\".concat(direction)] = 0;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDragStart\", function () {\n      var primaryMinSize, secondaryMinSize; // 当分割线不可拖拽时，设置主板块和次板块的最小尺寸，使之拖不动\n\n      if (_this.disabledDrag) {\n        primaryMinSize = _this.splitterSize - splitterLineSize - _this.foldSize;\n        secondaryMinSize = _this.foldSize;\n      } else {\n        primaryMinSize = _this.props.primaryMinSize;\n        secondaryMinSize = _this.props.secondaryMinSize;\n      }\n\n      _this.setState({\n        primaryMinSize: primaryMinSize,\n        secondaryMinSize: secondaryMinSize\n      });\n\n      _this.props.onDragStart && _this.props.onDragStart();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getSplitterSize\", function () {\n      _this.splitterSize = _this.splitter.current.container[\"client\".concat(_this.upSize)]; // 不能拖动时，次板块是0，\n\n      if (_this.storageValue && _this.storageValue.includes(disabledDrag)) {\n        // fix: 设置次板块最小尺寸解决改变页面高度位置变化的问题\n        _this.setState({\n          secondaryMinSize: _this.foldSize,\n          visibleContent: false\n        }); // 设置缓存中的尺寸用于还原\n\n\n        _this[\"secondary\".concat(_this.upSize)] = _parseInt(_this.storageValue);\n        _this.splitterLine.style.cssText = 'pointer-events: none';\n        _this.splitterButton.style.cssText = 'pointer-events: auto';\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setGlobalVar\", function () {\n      var vertical = _this.props.vertical;\n      var secondaryIndex = _this.state.secondaryIndex;\n\n      if (vertical) {\n        _this.size = 'height';\n        _this.upSize = 'Height';\n      } else {\n        _this.size = 'width';\n        _this.upSize = 'Width';\n      } // 将分割线上的按钮 push 到分割线中\n\n\n      _this.splitterLine = document.querySelector('.layout-splitter');\n      _this.secondaryDom = document.querySelectorAll('.layout-pane')[secondaryIndex];\n      var img = document.createElement('img');\n      img.className = 'splitter-button'; // img.src = require('../../static/splitter-button.svg')\n\n      _this.splitterLine.appendChild(img);\n\n      _this.splitterButton = document.querySelector('.splitter-button');\n\n      _this.addButtonEvent();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isVisibleFold\", function () {\n      _this.storageValue = localStorage.getItem(_this.props.storageName);\n\n      if (_this.storageValue && _this.storageValue.includes(disabledDrag)) {\n        _this.setState({\n          visibleFold: true\n        });\n      } else {\n        _this.setState({\n          visibleFold: false\n        });\n      }\n    });\n\n    props.showFold ? _this.foldSize = 26 : _this.foldSize = 0;\n    _this.state = {\n      primaryMinSize: props.primaryMinSize,\n      secondaryMinSize: props.secondaryMinSize,\n      // 次板块的索引。默认左边为主板块0， 右边为次板块1。通过修改 width 属性修改两块的大小，width 属性始终在次板块上 \n      secondaryIndex: _this.secondaryIndex(),\n      secondaryInitialSize: _this.getInitSize(),\n      // 当折叠时显示，展开时不显示。\n      // visibleFold: false,\n      // 是否显示次板块内容 \n      visibleContent: true\n    };\n    _this.splitter = React.createRef();\n    return _this;\n  }\n\n  _createClass(Splitter, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setGlobalVar(); // 获取主板块次板块分割线一共占据的尺寸   \n\n      this.getSplitterSize();\n      this.isVisibleFold();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var storageName = this.props.storageName; // disabledDrag 用来标识次板块尺寸为 0，此时 1. 保存上次的尺寸用于还原。2. 分割线不可拖拽。\n\n      if (storageName) {\n        if (this.secondaryDom.style[this.size] === \"\".concat(this.foldSize, \"px\")) {\n          localStorage.setItem(storageName, \"\".concat(this[\"secondary\".concat(this.upSize)]).concat(disabledDrag));\n        } else {\n          localStorage.setItem(storageName, this.secondaryDom.style[this.size]);\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          vertical = _this$props.vertical,\n          foldText = _this$props.foldText,\n          showFold = _this$props.showFold;\n      var _this$state2 = this.state,\n          primaryMinSize = _this$state2.primaryMinSize,\n          secondaryMinSize = _this$state2.secondaryMinSize,\n          secondaryInitialSize = _this$state2.secondaryInitialSize,\n          secondaryIndex = _this$state2.secondaryIndex,\n          visibleFold = _this$state2.visibleFold,\n          visibleContent = _this$state2.visibleContent;\n      var childrenArr = React.Children.toArray(this.props.children);\n      var itemClassNames = classNames('splitter-item', vertical ? 'splitter-vertical' : 'splitter-horizontal'); // 主板块内容一直显示；当点击收齐时，次板块内容不显示。\n\n      var visibleChildren0 = secondaryIndex === 1 || secondaryIndex === 0 && visibleContent;\n      var visibleChildren1 = secondaryIndex === 0 || secondaryIndex === 1 && visibleContent;\n      return React.createElement(SplitterLayout, _extends({}, this.props, {\n        primaryMinSize: primaryMinSize,\n        secondaryMinSize: secondaryMinSize,\n        secondaryInitialSize: secondaryInitialSize,\n        onDragStart: this.onDragStart,\n        customClassName: this.props.customClassName ? \"splitter-componented \".concat(this.props.customClassName) : 'splitter-componented',\n        ref: this.splitter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: itemClassNames,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, showFold && React.createElement(React.Fragment, null, secondaryIndex === 0 && visibleFold && !vertical && React.createElement(\"div\", {\n        className: \"fold-panel fold-panel-left\",\n        onClick: function onClick() {\n          return _this2.onFold('left');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }, React.createElement(_Icon, {\n        type: \"double-right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }), foldText && React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }, foldText)), secondaryIndex === 0 && visibleFold && vertical && React.createElement(\"div\", {\n        className: \"fold-panel fold-panel-top\",\n        onClick: function onClick() {\n          return _this2.onFold('top');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }, React.createElement(_Icon, {\n        type: \"double-right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }), foldText && React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }, foldText))), visibleChildren0 && childrenArr[0]), React.createElement(\"div\", {\n        className: itemClassNames,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }, visibleChildren1 && childrenArr[1], showFold && React.createElement(React.Fragment, null, secondaryIndex === 1 && visibleFold && !vertical && React.createElement(\"div\", {\n        className: \"fold-panel fold-panel-right\",\n        onClick: function onClick() {\n          return _this2.onFold('right');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270\n        },\n        __self: this\n      }, React.createElement(_Icon, {\n        type: \"double-left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271\n        },\n        __self: this\n      }), foldText && React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }, foldText)), secondaryIndex === 1 && visibleFold && vertical && React.createElement(\"div\", {\n        className: \"fold-panel fold-panel-bottom\",\n        onClick: function onClick() {\n          return _this2.onFold('bottom');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      }, React.createElement(_Icon, {\n        type: \"double-left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        },\n        __self: this\n      }), foldText && React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, foldText)))));\n    }\n  }]);\n\n  return Splitter;\n}(Component);\n\n_defineProperty(Splitter, \"defaultProps\", {\n  storageName: null,\n  primaryIndex: 0,\n  // 默认主板块是第一个\n  primaryMinSize: 40,\n  // 默认主板块最小尺寸\n  secondaryMinSize: 40,\n  // 默认次板块最小尺寸\n  vertical: false,\n  // 默认水平方向\n  showFold: false // 是否需要折叠区域，默认不显示\n\n});\n\nexport { Splitter as default };\nSplitter.propTypes = {\n  showFold: PropTypes.bool,\n  storageName: PropTypes.string,\n  foldText: PropTypes.string\n};","map":{"version":3,"sources":["E:/project/react/ssr/create-next-app/create-next-app/components/splitter/index.js"],"names":["SplitterLayout","React","Component","PropTypes","classNames","splitterLineSize","disabledDrag","Splitter","props","secondaryIndex","primaryIndex","storageValue","localStorage","getItem","storageName","secondaryInitialSize","includes","foldSize","undefined","direction","opposite","vertical","state","previewClassName","splitterButton","onclick","onSplitterButton","classList","add","visibleFold","visibleContent","setState","secondaryDom","style","size","upSize","splitterLine","cssText","setItem","secondaryMinSize","remove","setTimeout","document","querySelector","primaryMinSize","splitterSize","onDragStart","splitter","current","container","querySelectorAll","img","createElement","className","appendChild","addButtonEvent","showFold","getInitSize","createRef","setGlobalVar","getSplitterSize","isVisibleFold","foldText","childrenArr","Children","toArray","children","itemClassNames","visibleChildren0","visibleChildren1","customClassName","onFold","propTypes","bool","string"],"mappings":"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","sourcesContent":["import SplitterLayout from 'react-splitter-layout'\r\nimport 'react-splitter-layout/lib/index.css'\r\nimport React, { Component } from 'react'\r\nimport { Icon } from 'antd'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport './index.less'\r\n\r\nconst splitterLineSize = 16,\r\n    // 缓存中的标识，含有'disabledDrag'时只有主板块\r\n    disabledDrag = 'disabledDrag';\r\n\r\nexport default class Splitter extends Component {\r\n    static defaultProps = {\r\n        storageName: null,\r\n        primaryIndex: 0,      // 默认主板块是第一个\r\n        primaryMinSize: 40,   // 默认主板块最小尺寸\r\n        secondaryMinSize: 40, // 默认次板块最小尺寸\r\n        vertical: false,      // 默认水平方向\r\n        showFold: false,      // 是否需要折叠区域，默认不显示\r\n    }\r\n    constructor(props) {\r\n        super(props)\r\n        props.showFold ? this.foldSize = 26 : this.foldSize = 0\r\n        this.state = {\r\n            primaryMinSize: props.primaryMinSize,\r\n            secondaryMinSize: props.secondaryMinSize,\r\n            // 次板块的索引。默认左边为主板块0， 右边为次板块1。通过修改 width 属性修改两块的大小，width 属性始终在次板块上 \r\n            secondaryIndex: this.secondaryIndex(),\r\n            secondaryInitialSize: this.getInitSize(),\r\n            // 当折叠时显示，展开时不显示。\r\n            // visibleFold: false,\r\n            // 是否显示次板块内容 \r\n            visibleContent: true,\r\n        }\r\n        this.splitter = React.createRef()\r\n    }\r\n    secondaryIndex = () => {\r\n        let secondaryIndex\r\n        this.props.primaryIndex === 0 ? secondaryIndex = 1 : secondaryIndex = 0\r\n        return secondaryIndex\r\n    }\r\n    // {return} 返回次板块的值\r\n    // 1. if 当存储的值存在且包含'disabledDrag'，此时次板块尺寸为0，需要禁止拖拽\r\n    // 2. elseif 存储的值存在，取值\r\n    // 3. elseif 当父组件传默认值，取父组件的值\r\n    // 4. 父组件没有默认值，返回 undefined\r\n    getInitSize = () => {\r\n        this.storageValue = localStorage.getItem(this.props.storageName)\r\n        const { secondaryInitialSize } = this.props\r\n        if (this.storageValue && this.storageValue.includes(disabledDrag)) {\r\n            this.disabledDrag = true\r\n            return this.foldSize\r\n        } else if (this.storageValue) {\r\n            return parseInt(this.storageValue)\r\n        } else if (secondaryInitialSize) {\r\n            return parseInt(secondaryInitialSize)\r\n        } else {\r\n            return undefined\r\n        }\r\n    }\r\n    addButtonEvent = () => {\r\n        let direction, opposite\r\n        const { vertical } = this.props\r\n        const { secondaryIndex } = this.state\r\n        if (vertical) {\r\n            if (secondaryIndex === 1) {\r\n                if (this.storageValue && this.storageValue.includes(disabledDrag)) {\r\n                    direction = 'top'\r\n                    opposite = 'bottom'\r\n                } else {\r\n                    direction = 'bottom'\r\n                    opposite = 'top'\r\n                }\r\n            } else if (secondaryIndex === 0) {\r\n                if (this.storageValue && this.storageValue.includes(disabledDrag)) {\r\n                    direction = 'bottom'\r\n                    opposite = 'top'\r\n                } else {\r\n                    direction = 'top'\r\n                    opposite = 'bottom'\r\n                }\r\n            }\r\n            // 垂直预览的 className\r\n            this.previewClassName = 'preview-secondaryDom-vertical'\r\n            this.splitterButton.onclick = () => this.onSplitterButton(direction, opposite)\r\n        } else {\r\n            if (secondaryIndex === 1) {\r\n                if (this.storageValue && this.storageValue.includes(disabledDrag)) {\r\n                    direction = 'left'\r\n                    opposite = 'right'\r\n                } else {\r\n                    direction = 'right'\r\n                    opposite = 'left'\r\n                }\r\n            } else if (secondaryIndex === 0) {\r\n                if (this.storageValue && this.storageValue.includes(disabledDrag)) {\r\n                    direction = 'right'\r\n                    opposite = 'left'\r\n                } else {\r\n                    direction = 'left'\r\n                    opposite = 'right'\r\n                }\r\n            }\r\n            // 水平预览的 className\r\n            this.previewClassName = 'preview-secondaryDom-horizontal'\r\n            this.splitterButton.onclick = () => this.onSplitterButton(direction, opposite)\r\n        }\r\n        this.splitterButton.classList.add(direction)\r\n    }\r\n    onSplitterButton = (direction, opposite) => {\r\n        const { storageName } = this.props\r\n        const { visibleFold, visibleContent } = this.state\r\n        this.setState({ visibleFold: !visibleFold, visibleContent: !visibleContent })\r\n\r\n        if (this.secondaryDom.style[this.size] === `${this.foldSize}px`) {\r\n            this.disabledDrag = false\r\n            this.secondaryDom.style[this.size] = `${this[`secondary${this.upSize}`]}px`  // this.secondaryWidth, this.secondaryHeight\r\n            this.splitterLine.style.cssText = 'pointer-events: auto'\r\n        } else {\r\n            this.disabledDrag = true\r\n            // 存储次板块宽度，折叠宽度设置为提示面板的宽度\r\n            this[`secondary${this.upSize}`] = parseInt(this.secondaryDom.style[this.size])\r\n            // 收起次板块时保存尺寸，用于初次渲染时还原\r\n            storageName && localStorage.setItem(storageName, `${this[`secondary${this.upSize}`]}${disabledDrag}`)\r\n            this.secondaryDom.style[this.size] = `${this.foldSize}px`\r\n            this.splitterLine.style.cssText = 'pointer-events: none'\r\n            this.splitterButton.style.cssText = 'pointer-events: auto'\r\n            // fix：修改宽度为0，调整浏览器高度后，次板块宽度会改变为最小宽度。\r\n            this.setState({ secondaryMinSize: this.foldSize })\r\n        }\r\n\r\n        this.secondaryDom.classList.remove(this.previewClassName)\r\n        this.splitterButton.classList.remove(direction)\r\n        this.splitterButton.classList.add(opposite)\r\n        this.splitterButton.onclick = () => this.onSplitterButton(opposite, direction)\r\n\r\n    }\r\n    onFold = (direction) => {\r\n        const { visibleContent } = this.state\r\n        this.setState({ visibleContent: !visibleContent })\r\n        // 当次板块内容显示时，点击折叠收起内容。尺寸等于折叠面板\r\n        if (visibleContent) { \r\n            this.secondaryDom.style.cssText = `${this.size}: ${this.foldSize}px`\r\n            setTimeout(() => {\r\n                this.secondaryDom.classList.remove(this.previewClassName)\r\n            })\r\n        } else { // 当次板块内容不显示时，点击展开显示内容。尺寸还原\r\n            this.secondaryDom.classList.add(this.previewClassName)\r\n            this.secondaryDom.style.cssText = `${this.size}: ${this[`secondary${this.upSize}`]}` // width: this.secondaryWidth\r\n        }\r\n        // 设置展开时预览窗口的位置\r\n        document.querySelector(`.${this.previewClassName}`).style[`${direction}`] = 0   \r\n    }\r\n    // fix：解决不可拖拽时，按钮可拖拽的问题\r\n    onDragStart = () => {\r\n        let primaryMinSize, secondaryMinSize\r\n        // 当分割线不可拖拽时，设置主板块和次板块的最小尺寸，使之拖不动\r\n        if (this.disabledDrag) {\r\n            primaryMinSize = this.splitterSize - splitterLineSize - this.foldSize\r\n            secondaryMinSize = this.foldSize\r\n        } else {\r\n            primaryMinSize = this.props.primaryMinSize\r\n            secondaryMinSize = this.props.secondaryMinSize\r\n        }\r\n        this.setState({ primaryMinSize, secondaryMinSize })\r\n        this.props.onDragStart && this.props.onDragStart()\r\n    }\r\n    getSplitterSize = () => {\r\n        this.splitterSize = this.splitter.current.container[`client${this.upSize}`]\r\n        // 不能拖动时，次板块是0，\r\n        if (this.storageValue && this.storageValue.includes(disabledDrag)) {\r\n            // fix: 设置次板块最小尺寸解决改变页面高度位置变化的问题\r\n            this.setState({\r\n                secondaryMinSize: this.foldSize,\r\n                visibleContent: false,\r\n            })\r\n            // 设置缓存中的尺寸用于还原\r\n            this[`secondary${this.upSize}`] = parseInt(this.storageValue)\r\n            this.splitterLine.style.cssText = 'pointer-events: none'\r\n            this.splitterButton.style.cssText = 'pointer-events: auto'\r\n        }\r\n    }\r\n    setGlobalVar = () => {\r\n        const { vertical } = this.props\r\n        const { secondaryIndex } = this.state\r\n        if (vertical) {\r\n            this.size = 'height'\r\n            this.upSize = 'Height'\r\n        } else {\r\n            this.size = 'width'\r\n            this.upSize = 'Width'\r\n        }\r\n        // 将分割线上的按钮 push 到分割线中\r\n        this.splitterLine = document.querySelector('.layout-splitter')\r\n        this.secondaryDom = document.querySelectorAll('.layout-pane')[secondaryIndex]\r\n        let img = document.createElement('img')\r\n        img.className = 'splitter-button'\r\n        // img.src = require('../../static/splitter-button.svg')\r\n        this.splitterLine.appendChild(img)\r\n        this.splitterButton = document.querySelector('.splitter-button')\r\n        this.addButtonEvent()\r\n    }\r\n    isVisibleFold = () => {\r\n        this.storageValue = localStorage.getItem(this.props.storageName)\r\n        if (this.storageValue && this.storageValue.includes(disabledDrag)) {\r\n            this.setState({ visibleFold: true })\r\n        } else {\r\n            this.setState({ visibleFold: false })\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.setGlobalVar()\r\n        // 获取主板块次板块分割线一共占据的尺寸   \r\n        this.getSplitterSize()\r\n        this.isVisibleFold()\r\n    }\r\n    componentWillUnmount() {\r\n        const { storageName } = this.props\r\n        // disabledDrag 用来标识次板块尺寸为 0，此时 1. 保存上次的尺寸用于还原。2. 分割线不可拖拽。\r\n        if (storageName) {\r\n            if (this.secondaryDom.style[this.size] === `${this.foldSize}px`) {\r\n                localStorage.setItem(storageName, `${this[`secondary${this.upSize}`]}${disabledDrag}`)\r\n            } else {\r\n                localStorage.setItem(storageName, this.secondaryDom.style[this.size])\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        const { vertical, foldText, showFold } = this.props\r\n        const { primaryMinSize, secondaryMinSize, secondaryInitialSize, secondaryIndex, visibleFold, visibleContent } = this.state\r\n        const childrenArr = React.Children.toArray(this.props.children)\r\n        const itemClassNames = classNames('splitter-item', vertical ? 'splitter-vertical' : 'splitter-horizontal')\r\n        // 主板块内容一直显示；当点击收齐时，次板块内容不显示。\r\n        const visibleChildren0 = (secondaryIndex === 1 || (secondaryIndex === 0 && visibleContent))\r\n        const visibleChildren1 = (secondaryIndex === 0 || (secondaryIndex === 1 && visibleContent))\r\n        return (\r\n            <SplitterLayout\r\n                {...this.props}\r\n                primaryMinSize={primaryMinSize}\r\n                secondaryMinSize={secondaryMinSize}\r\n                secondaryInitialSize={secondaryInitialSize}\r\n                onDragStart={this.onDragStart}\r\n                customClassName={this.props.customClassName ? `splitter-componented ${this.props.customClassName}` : 'splitter-componented'}\r\n                ref={this.splitter}\r\n            >\r\n                <div className={itemClassNames}>\r\n                    {\r\n                        showFold\r\n                        &&\r\n                        <>\r\n                            {secondaryIndex === 0 && visibleFold && !vertical && <div className=\"fold-panel fold-panel-left\" onClick={() => this.onFold('left')}>\r\n                                <Icon type=\"double-right\" />\r\n                                {foldText && <p>{foldText}</p>}\r\n                            </div>}\r\n                            {secondaryIndex === 0 && visibleFold && vertical && <div className=\"fold-panel fold-panel-top\" onClick={() => this.onFold('top')}>\r\n                                <Icon type=\"double-right\" />\r\n                                {foldText && <p>{foldText}</p>}\r\n                            </div>}\r\n                        </>\r\n                    }\r\n                    {visibleChildren0 && childrenArr[0]}\r\n                </div>\r\n                <div className={itemClassNames}>\r\n                    {visibleChildren1 && childrenArr[1]}\r\n                    {\r\n                        showFold\r\n                        &&\r\n                        <>\r\n                            {secondaryIndex === 1 && visibleFold && !vertical && <div className=\"fold-panel fold-panel-right\" onClick={() => this.onFold('right')}>\r\n                                <Icon type=\"double-left\" />\r\n                                {foldText && <p>{foldText}</p>}\r\n                            </div>}\r\n                            {secondaryIndex === 1 && visibleFold && vertical && <div className=\"fold-panel fold-panel-bottom\" onClick={() => this.onFold('bottom')}>\r\n                                <Icon type=\"double-left\" />\r\n                                {foldText && <p>{foldText}</p>}\r\n                            </div>}\r\n                        </>\r\n                    }\r\n                </div>\r\n            </SplitterLayout>\r\n        );\r\n    }\r\n}\r\n\r\nSplitter.propTypes = {\r\n    showFold: PropTypes.bool,\r\n    storageName: PropTypes.string,\r\n    foldText: PropTypes.string,\r\n}\r\n"]},"metadata":{},"sourceType":"module"}