{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"E:\\\\project\\\\react\\\\ssr\\\\create-next-app\\\\create-next-app\\\\components\\\\ag-grid\\\\index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**\r\n * Created by csz on 2019/7/24\r\n */\nimport React, { Component } from \"react\";\nimport PropTypes from 'prop-types';\nimport { AgGridReact } from \"ag-grid-react/main\";\nimport ag_zh_CN from './locales/zh-CN'; // import {GridDatePicker, GridDatePickerRender} from './gridDatePicker'\n\nimport Pagination from '../pagination';\nimport AgLoading from './grid-loading';\nimport './agGridTheme.scss';\nimport './agGrid.less';\nvar currentLang = window.localStorage.getItem('gyLang') || 'zh_CN'; // grid国际化\n\nvar ag_langMap = {\n  'zh_CN': ag_zh_CN,\n  'en_US': null\n}; // 关联ag-Grid语言包 默认为英文en_US可设置为null\n// grid基本默认配置 以下属性均可在使用AgGrid组件时传入对应Props修改\n// 如修改列表的行高度为50,使用时<AgGrid rowHeight={50}/>\n\nvar gridOptions = {\n  localeText: ag_langMap[currentLang],\n  // 国际化(根据本地localStorage的gyLang显示对应语言\n  enableSorting: false,\n  // 是否开启排序(默认false关闭、true开启)可在columnDefs对应列中单独配置sortable\n  enableFilter: false,\n  // 是否开启过滤(默认false关闭、true开启)可在columnDefs对应列中单独配置filter\n  suppressMenuHide: true,\n  // 是否阻止列菜单隐藏(默认false隐藏、true始终显示)\n  rowDragManaged: true,\n  // 是否支持行拖拽(true为支持、false为不支持)\n  animateRows: true,\n  // 是否显示行拖拽动画效果(true为显示、false为不显示)\n  suppressRowClickSelection: false,\n  // 点击行是否会勾选该行(true为不勾选、false勾选)\n  rowSelection: 'multiple',\n  // 行选中方式(单选single、多选multiple) 按住shift支持多选\n  suppressCellSelection: true,\n  // 单元格是否允许选中，true：不选中，false：选中（默认）   \n  rowStyle: {\n    // 行样式\n    borderColor: '#e8e8e8'\n  },\n  headerHeight: 32,\n  // 表头高度\n  rowHeight: 40,\n  // 默认行高\n  enableCellTextSelection: false // 是否允许选中行内文本\n\n}; // gird基本列配置（初始化表格默认使用以下配置来配置每一列）\n// 如需修改基本列设置 则按以下格式传入自定义的基础列配置 如<AgGrid defaultColDef = {your_defaultColDef}>\n// 如需单独个性化配置某列、可在columnDefs的对应列中添加相应属性进行个性化配置\n\nvar gridDefaultColDef = {\n  width: 150,\n  // 列默认宽度px\n  filter: 'agNumberColumnFilter',\n  // 列默认使用ag-grid提供的数字过滤器(文本过滤器'agTextColumnFilter'|日期过滤器'agDateColumnFilter')\n  resizable: true,\n  // 是否列可伸缩(true为支持列伸缩、false为禁止列伸缩)\n  editable: false,\n  // 是否列可编辑(默认false即不可编辑)可在columnDefs对应列中单独配置filter\n  cellStyle: {\n    // 单元格样式\n    color: \"#333\",\n    lineHeight: '40px'\n  }\n};\n\nvar AgGrid =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AgGrid, _Component);\n\n  function AgGrid(props) {\n    var _this;\n\n    _classCallCheck(this, AgGrid);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AgGrid).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"computeContextMenuPosition\", function (clientX, clientY) {\n      var contextMenuNode = document.getElementById('ag-grid-context-menu');\n      var screenW = window.innerWidth; // 视窗宽度\n\n      var screenH = window.innerHeight; // 视窗高度\n\n      var menuW = contextMenuNode.offsetWidth; // 目标宽度\n\n      var menuH = contextMenuNode.offsetHeight; // 目标高度\n\n      var right = screenW - clientX > menuW;\n      var left = !right;\n      var bottom = screenH - clientY > menuH;\n      var top = !bottom;\n      var position = {};\n\n      if (right) {\n        position.left = \"\".concat(clientX, \"px\");\n      }\n\n      if (left) {\n        position.left = \"\".concat(clientX - menuW, \"px\");\n      }\n\n      if (bottom) {\n        position.top = \"\".concat(clientY, \"px\");\n      }\n\n      if (top) {\n        position.top = \"\".concat(clientY - menuH, \"px\");\n      }\n\n      return position;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onColumnResized\", function (params) {} // this.gridApi.resetRowHeights();\n    // 以某个字段计算行高（超过三张图片换行）\n    // getRowHeight = (params) => {\n    //     console.log(params);\n    //     return 28 * (Math.floor(params.data.receiverAddress.length / 35) + 1)\n    // }\n    // 右键项点击\n    );\n\n    _defineProperty(_assertThisInitialized(_this), \"onGridContextMenuItemClick\", function (menuItemObject) {\n      var domEvent = menuItemObject.domEvent;\n      domEvent.stopPropagation();\n      domEvent.preventDefault();\n\n      _this.props.contextMenu.props.onClick(menuItemObject, _this.targetRowDataObject);\n    });\n\n    _this.targetRowDataObject = null; // 存储右键行数据对象\n\n    _this.state = {\n      top: 0,\n      left: '-10000px'\n    };\n    _this.defaultColDef = {\n      onCellContextMenu: function onCellContextMenu(params) {\n        var event = params.event,\n            api = params.api,\n            node = params.node;\n        event.preventDefault();\n        event.stopPropagation();\n        api.deselectAll(); // 取消所有选中\n\n        node.setSelected(true); // 选中当前行\n\n        if (_this.props.contextMenu) {\n          var _this$computeContextM = _this.computeContextMenuPosition(event.clientX, event.clientY),\n              top = _this$computeContextM.top,\n              left = _this$computeContextM.left;\n\n          _this.setState({\n            top: top,\n            left: left\n          }); // 设置右键菜单位置\n\n\n          _this.targetRowDataObject = params;\n        }\n      }\n    };\n    return _this;\n  } // 计算右键菜单位置\n\n\n  _createClass(AgGrid, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // 干掉主表格区域浏览器默认右键\n      document.getElementById('ag-grid-bolck').oncontextmenu = function () {\n        return false;\n      }; // 全局监听mouseup，关闭右键列表\n\n\n      document.addEventListener('mouseup', function (e) {\n        // 判断右键菜单是否显示在可视区域内（目前仅根据top来做区分）\n        if (_parseInt(_this2.state.top) > 0) {\n          e.stopPropagation();\n          e.preventDefault();\n\n          _this2.setState({\n            top: 0,\n            left: '-10000px'\n          });\n        }\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.removeEventListener('mouseup', null);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          pagination = _this$props.pagination,\n          contextMenu = _this$props.contextMenu,\n          loading = _this$props.loading,\n          extraMaskHeight = _this$props.extraMaskHeight,\n          columnDefs = _this$props.columnDefs,\n          rowData = _this$props.rowData,\n          defaultColDef = _this$props.defaultColDef;\n      var _this$state = this.state,\n          top = _this$state.top,\n          left = _this$state.left;\n      var hidePagination = typeof pagination === 'boolean' && pagination == false; // 不使用分页\n\n      var gridBodyHeight = hidePagination ? \"100%\" : \"calc(100% - 34px)\"; // 隐藏分页则100% 使用分页则减分页高度\n\n      var loadingHeight = typeof extraMaskHeight === 'number' ? \"calc(100% + \".concat(extraMaskHeight, \"px)\") : \"100%\"; // 隐藏分页、loading遮罩增加extraHeight\n      // 添加行在总数据中的index\n\n      if (rowData) {\n        var page = pagination.page,\n            pageSize = pagination.pageSize,\n            total = pagination.total;\n\n        if (page * pageSize < total) {\n          rowData.forEach(function (item, index) {\n            var totalIndex = pageSize * (page - 1) + index + 1;\n            item['rowNum'] = totalIndex < 10 ? \"0\" + totalIndex : totalIndex;\n          });\n        }\n      }\n\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"ag-theme-balham ag-grid-block\",\n        id: \"ag-grid-bolck\",\n        style: {\n          width: '100%',\n          height: '100%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          height: gridBodyHeight\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(AgGridReact, _extends({}, gridOptions, this.props, {\n        // 自定义props修改默认配置(对外暴露)\n        defaultColDef: _objectSpread({}, gridDefaultColDef, {}, defaultColDef) // ag-grid默认列配置\n        // rowData = {rowData}                              // 表格行数据\n        // onGridReady={onGridReady}                        // 监听表格加载完毕\n        // columnDefs={columnDefs}                             // 列配置细节\n        // getRowHeight={this.getRowHeight}                 // 行高设置\n        // context={context}                                // react组件的this\n        // frameworkComponents={frameworkComponents}        // 注册react组件\n        ,\n        pagination: false // 完全屏蔽ag-grid的分页\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }))), hidePagination ? '' : React.createElement(Pagination, _extends({}, pagination, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      })), React.createElement(AgLoading, {\n        loading: loading,\n        style: {\n          height: loadingHeight\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      })), contextMenu && React.cloneElement(contextMenu, {\n        onClick: this.onGridContextMenuItemClick,\n        mode: \"vertical\",\n        id: 'ag-grid-context-menu',\n        className: \"ag-grid-context-menu\",\n        style: {\n          top: top,\n          left: left\n        }\n      }));\n    }\n  }]);\n\n  return AgGrid;\n}(Component); // props校验\n\n\nAgGrid.propTypes = {\n  rowData: PropTypes.array,\n  onGridReady: PropTypes.func,\n  loading: PropTypes.bool,\n  pagination: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n  extraHeight: PropTypes.number // 扩展loading遮盖高度\n\n}; // 默认属性\n\nAgGrid.defaultProps = {\n  rowData: null,\n  loading: false\n};\nexport default AgGrid;","map":{"version":3,"sources":["E:/project/react/ssr/create-next-app/create-next-app/components/ag-grid/index.js"],"names":["React","Component","PropTypes","AgGridReact","ag_zh_CN","Pagination","AgLoading","currentLang","window","localStorage","getItem","ag_langMap","gridOptions","localeText","enableSorting","enableFilter","suppressMenuHide","rowDragManaged","animateRows","suppressRowClickSelection","rowSelection","suppressCellSelection","rowStyle","borderColor","headerHeight","rowHeight","enableCellTextSelection","gridDefaultColDef","width","filter","resizable","editable","cellStyle","color","lineHeight","AgGrid","props","clientX","clientY","contextMenuNode","document","getElementById","screenW","innerWidth","screenH","innerHeight","menuW","offsetWidth","menuH","offsetHeight","right","left","bottom","top","position","params","menuItemObject","domEvent","stopPropagation","preventDefault","contextMenu","onClick","targetRowDataObject","state","defaultColDef","onCellContextMenu","event","api","node","deselectAll","setSelected","computeContextMenuPosition","setState","oncontextmenu","addEventListener","e","removeEventListener","pagination","loading","extraMaskHeight","columnDefs","rowData","hidePagination","gridBodyHeight","loadingHeight","page","pageSize","total","forEach","item","index","totalIndex","height","cloneElement","onGridContextMenuItemClick","mode","id","className","style","propTypes","array","onGridReady","func","bool","oneOfType","object","extraHeight","number","defaultProps"],"mappings":"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","sourcesContent":["/**\r\n * Created by csz on 2019/7/24\r\n */\r\nimport React, { Component } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { AgGridReact } from \"ag-grid-react/main\";\r\nimport ag_zh_CN from './locales/zh-CN';\r\n// import {GridDatePicker, GridDatePickerRender} from './gridDatePicker'\r\nimport Pagination from '../pagination';\r\nimport AgLoading from './grid-loading';\r\nimport { Spin } from 'antd';\r\nimport './agGridTheme.scss'\r\nimport './agGrid.less'\r\n\r\nconst currentLang = window.localStorage.getItem('gyLang')||'zh_CN'; // grid国际化\r\nconst ag_langMap = {'zh_CN':ag_zh_CN, 'en_US':null};                    // 关联ag-Grid语言包 默认为英文en_US可设置为null\r\n\r\n// grid基本默认配置 以下属性均可在使用AgGrid组件时传入对应Props修改\r\n// 如修改列表的行高度为50,使用时<AgGrid rowHeight={50}/>\r\nconst gridOptions = {\r\n    localeText:ag_langMap[currentLang],         // 国际化(根据本地localStorage的gyLang显示对应语言\r\n    enableSorting:false,                        // 是否开启排序(默认false关闭、true开启)可在columnDefs对应列中单独配置sortable\r\n    enableFilter:false,                         // 是否开启过滤(默认false关闭、true开启)可在columnDefs对应列中单独配置filter\r\n    suppressMenuHide:true,                      // 是否阻止列菜单隐藏(默认false隐藏、true始终显示)\r\n    rowDragManaged:true,                        // 是否支持行拖拽(true为支持、false为不支持)\r\n    animateRows:true,                           // 是否显示行拖拽动画效果(true为显示、false为不显示)\r\n    suppressRowClickSelection:false,            // 点击行是否会勾选该行(true为不勾选、false勾选)\r\n    rowSelection:'multiple',                    // 行选中方式(单选single、多选multiple) 按住shift支持多选\r\n    suppressCellSelection: true,                // 单元格是否允许选中，true：不选中，false：选中（默认）   \r\n    rowStyle: {                                 // 行样式\r\n        borderColor: '#e8e8e8',\r\n    },\r\n    headerHeight: 32,                           // 表头高度\r\n    rowHeight: 40,                              // 默认行高\r\n    enableCellTextSelection: false,             // 是否允许选中行内文本\r\n}\r\n\r\n// gird基本列配置（初始化表格默认使用以下配置来配置每一列）\r\n// 如需修改基本列设置 则按以下格式传入自定义的基础列配置 如<AgGrid defaultColDef = {your_defaultColDef}>\r\n// 如需单独个性化配置某列、可在columnDefs的对应列中添加相应属性进行个性化配置\r\nconst gridDefaultColDef = {\r\n    width:150,                                  // 列默认宽度px\r\n    filter: 'agNumberColumnFilter',             // 列默认使用ag-grid提供的数字过滤器(文本过滤器'agTextColumnFilter'|日期过滤器'agDateColumnFilter')\r\n    resizable: true,                            // 是否列可伸缩(true为支持列伸缩、false为禁止列伸缩)\r\n    editable: false,                            // 是否列可编辑(默认false即不可编辑)可在columnDefs对应列中单独配置filter\r\n    cellStyle: {                                // 单元格样式\r\n        color: \"#333\",\r\n        lineHeight: '40px'\r\n    },\r\n}\r\n\r\nclass AgGrid extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.targetRowDataObject = null;        // 存储右键行数据对象\r\n        this.state = {\r\n            top: 0,\r\n            left: '-10000px',\r\n        };\r\n        this.defaultColDef = {\r\n            onCellContextMenu: (params)=>{\r\n                const { event, api, node } = params;\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                api.deselectAll();              // 取消所有选中\r\n                node.setSelected(true);         // 选中当前行\r\n                if(this.props.contextMenu){\r\n                    const { top, left } = this.computeContextMenuPosition(event.clientX, event.clientY);\r\n                    this.setState({top, left})      // 设置右键菜单位置\r\n                    this.targetRowDataObject = params;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    // 计算右键菜单位置\r\n    computeContextMenuPosition = (clientX, clientY) => {\r\n        const contextMenuNode = document.getElementById('ag-grid-context-menu');\r\n        const screenW = window.innerWidth;          // 视窗宽度\r\n        const screenH = window.innerHeight;         // 视窗高度\r\n        const menuW = contextMenuNode.offsetWidth;        // 目标宽度\r\n        const menuH = contextMenuNode.offsetHeight;       // 目标高度\r\n\r\n        const right = (screenW - clientX) > menuW;\r\n        const left = !right;\r\n        const bottom = (screenH - clientY) > menuH;\r\n        const top = !bottom;\r\n        \r\n        let position = {}\r\n        if (right) { position.left = `${clientX}px`; }\r\n        if (left) { position.left = `${clientX - menuW}px`; }\r\n        if (bottom) { position.top = `${clientY}px`; }\r\n        if (top) { position.top = `${clientY - menuH}px`; }\r\n\r\n        return position;\r\n    }\r\n\r\n    // 列伸缩回调 (伸缩后可获取伸缩后的相关数据 可用于将来的保存布局)\r\n    onColumnResized = (params)=>{\r\n        // this.gridApi.resetRowHeights();\r\n    }\r\n\r\n    // 以某个字段计算行高（超过三张图片换行）\r\n    // getRowHeight = (params) => {\r\n    //     console.log(params);\r\n    //     return 28 * (Math.floor(params.data.receiverAddress.length / 35) + 1)\r\n    // }\r\n\r\n    // 右键项点击\r\n    onGridContextMenuItemClick = (menuItemObject) => {\r\n        const { domEvent } = menuItemObject;\r\n        domEvent.stopPropagation();\r\n        domEvent.preventDefault();\r\n        this.props.contextMenu.props.onClick(menuItemObject, this.targetRowDataObject)\r\n    }\r\n\r\n    componentDidMount(){\r\n        // 干掉主表格区域浏览器默认右键\r\n        document.getElementById('ag-grid-bolck').oncontextmenu = () => {\r\n            return false;\r\n        }\r\n        // 全局监听mouseup，关闭右键列表\r\n        document.addEventListener('mouseup', (e)=>{\r\n            // 判断右键菜单是否显示在可视区域内（目前仅根据top来做区分）\r\n            if(parseInt(this.state.top) > 0){\r\n                e.stopPropagation();\r\n                e.preventDefault();\r\n                this.setState({top:0, left: '-10000px'})\r\n            }\r\n        })\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        document.removeEventListener('mouseup',null);\r\n    }\r\n\r\n    render() {\r\n        const { pagination,contextMenu,loading,extraMaskHeight,columnDefs,rowData, defaultColDef} = this.props ;\r\n        const { top, left } = this.state;\r\n        const hidePagination = (typeof pagination === 'boolean' && pagination == false); // 不使用分页\r\n        const gridBodyHeight = hidePagination?`100%`:`calc(100% - 34px)`;                // 隐藏分页则100% 使用分页则减分页高度\r\n        const loadingHeight  = typeof extraMaskHeight === 'number'?`calc(100% + ${extraMaskHeight}px)`:`100%`; // 隐藏分页、loading遮罩增加extraHeight\r\n\r\n        // 添加行在总数据中的index\r\n        if(rowData){\r\n            const {page,pageSize,total} = pagination;\r\n            if(page*pageSize<total) {\r\n                rowData.forEach((item,index)=>{\r\n                    let totalIndex = pageSize*(page-1)+index+1;\r\n                    item['rowNum'] = totalIndex<10?\"0\"+totalIndex:totalIndex;\r\n                })\r\n            }\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                    <div\r\n                        className=\"ag-theme-balham ag-grid-block\"\r\n                        id=\"ag-grid-bolck\"\r\n                        style={{width:'100%',height:'100%'}}\r\n                    >\r\n                        <div style={{height:gridBodyHeight}}>\r\n                        <AgGridReact\r\n                            {...gridOptions}                                    // ag-grid基础默认配置\r\n\r\n                            {...this.props}                                     // 自定义props修改默认配置(对外暴露)\r\n                            defaultColDef={{...gridDefaultColDef,...defaultColDef}}                       // ag-grid默认列配置\r\n                            // rowData = {rowData}                              // 表格行数据\r\n                            // onGridReady={onGridReady}                        // 监听表格加载完毕\r\n                            // columnDefs={columnDefs}                             // 列配置细节\r\n                            // getRowHeight={this.getRowHeight}                 // 行高设置\r\n                            // context={context}                                // react组件的this\r\n                            // frameworkComponents={frameworkComponents}        // 注册react组件\r\n\r\n                            pagination={false}                                  // 完全屏蔽ag-grid的分页\r\n                        />\r\n                        </div>\r\n                        {hidePagination ? '' :<Pagination {...pagination}/>}\r\n                        <AgLoading loading={loading} style={{height:loadingHeight}}/>\r\n                    </div>\r\n\r\n                    {/*右键菜单*/}\r\n                    {contextMenu && React.cloneElement(contextMenu, {\r\n                        onClick: this.onGridContextMenuItemClick,\r\n                        mode: \"vertical\",\r\n                        id: 'ag-grid-context-menu',\r\n                        className: \"ag-grid-context-menu\",\r\n                        style: {top: top, left: left},\r\n                    })}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\n// props校验\r\nAgGrid.propTypes = {\r\n    rowData:PropTypes.array,\r\n    onGridReady:PropTypes.func,\r\n    loading:PropTypes.bool,\r\n    pagination:PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\r\n    extraHeight:PropTypes.number    // 扩展loading遮盖高度\r\n};\r\n\r\n// 默认属性\r\nAgGrid.defaultProps = {\r\n    rowData:null,\r\n    loading: false,\r\n};\r\n\r\nexport default AgGrid;"]},"metadata":{},"sourceType":"module"}