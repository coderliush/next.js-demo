{"version":3,"file":"0.js","sources":["webpack:///./components/ag-grid/grid-loading/index.js","webpack:///./components/ag-grid/index.js","webpack:///./components/ag-grid/locales/zh-CN.js","webpack:///./components/pagination/antd-pagination.js","webpack:///./components/pagination/cerp-pagination.js","webpack:///./components/pagination/index.js"],"sourcesContent":["/**\r\n * @Author: chenshizhong\r\n * @Date: 2019/08/15 14:41:31\r\n * @Description: loading\r\n */\r\nimport React from 'react';\r\nimport './index.less';\r\n\r\nexport default ({loading,style})=>{\r\n        return(\r\n            <div style={{display:loading?'inline-block':'none'}}>\r\n                <div className=\"ag-grid-loading\" style={style}></div>\r\n                <div className=\"ag-grid-loading-animate\" >\r\n                    <span className=\"spin-dot\">\r\n                        <i className=\"spin-dot-item\"></i>\r\n                        <i className=\"spin-dot-item\"></i>\r\n                        <i className=\"spin-dot-item\"></i>\r\n                        <i className=\"spin-dot-item\"></i>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        )\r\n}\r\n\r\n\r\n","/**\r\n * Created by csz on 2019/7/24\r\n */\r\nimport React, { Component } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { AgGridReact } from \"ag-grid-react/main\";\r\nimport ag_zh_CN from './locales/zh-CN';\r\n// import {GridDatePicker, GridDatePickerRender} from './gridDatePicker'\r\nimport Pagination from '../pagination';\r\nimport AgLoading from './grid-loading';\r\nimport { Spin } from 'antd';\r\nimport './agGridTheme.scss'\r\nimport './agGrid.less'\r\n\r\nconst currentLang = window.localStorage.getItem('gyLang')||'zh_CN'; // grid国际化\r\nconst ag_langMap = {'zh_CN':ag_zh_CN, 'en_US':null};                    // 关联ag-Grid语言包 默认为英文en_US可设置为null\r\n\r\n// grid基本默认配置 以下属性均可在使用AgGrid组件时传入对应Props修改\r\n// 如修改列表的行高度为50,使用时<AgGrid rowHeight={50}/>\r\nconst gridOptions = {\r\n    localeText:ag_langMap[currentLang],         // 国际化(根据本地localStorage的gyLang显示对应语言\r\n    enableSorting:false,                        // 是否开启排序(默认false关闭、true开启)可在columnDefs对应列中单独配置sortable\r\n    enableFilter:false,                         // 是否开启过滤(默认false关闭、true开启)可在columnDefs对应列中单独配置filter\r\n    suppressMenuHide:true,                      // 是否阻止列菜单隐藏(默认false隐藏、true始终显示)\r\n    rowDragManaged:true,                        // 是否支持行拖拽(true为支持、false为不支持)\r\n    animateRows:true,                           // 是否显示行拖拽动画效果(true为显示、false为不显示)\r\n    suppressRowClickSelection:false,            // 点击行是否会勾选该行(true为不勾选、false勾选)\r\n    rowSelection:'multiple',                    // 行选中方式(单选single、多选multiple) 按住shift支持多选\r\n    suppressCellSelection: true,                // 单元格是否允许选中，true：不选中，false：选中（默认）   \r\n    rowStyle: {                                 // 行样式\r\n        borderColor: '#e8e8e8',\r\n    },\r\n    headerHeight: 32,                           // 表头高度\r\n    rowHeight: 40,                              // 默认行高\r\n    enableCellTextSelection: false,             // 是否允许选中行内文本\r\n}\r\n\r\n// gird基本列配置（初始化表格默认使用以下配置来配置每一列）\r\n// 如需修改基本列设置 则按以下格式传入自定义的基础列配置 如<AgGrid defaultColDef = {your_defaultColDef}>\r\n// 如需单独个性化配置某列、可在columnDefs的对应列中添加相应属性进行个性化配置\r\nconst gridDefaultColDef = {\r\n    width:150,                                  // 列默认宽度px\r\n    filter: 'agNumberColumnFilter',             // 列默认使用ag-grid提供的数字过滤器(文本过滤器'agTextColumnFilter'|日期过滤器'agDateColumnFilter')\r\n    resizable: true,                            // 是否列可伸缩(true为支持列伸缩、false为禁止列伸缩)\r\n    editable: false,                            // 是否列可编辑(默认false即不可编辑)可在columnDefs对应列中单独配置filter\r\n    cellStyle: {                                // 单元格样式\r\n        color: \"#333\",\r\n        lineHeight: '40px'\r\n    },\r\n}\r\n\r\nclass AgGrid extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.targetRowDataObject = null;        // 存储右键行数据对象\r\n        this.state = {\r\n            top: 0,\r\n            left: '-10000px',\r\n        };\r\n        this.defaultColDef = {\r\n            onCellContextMenu: (params)=>{\r\n                const { event, api, node } = params;\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                api.deselectAll();              // 取消所有选中\r\n                node.setSelected(true);         // 选中当前行\r\n                if(this.props.contextMenu){\r\n                    const { top, left } = this.computeContextMenuPosition(event.clientX, event.clientY);\r\n                    this.setState({top, left})      // 设置右键菜单位置\r\n                    this.targetRowDataObject = params;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    // 计算右键菜单位置\r\n    computeContextMenuPosition = (clientX, clientY) => {\r\n        const contextMenuNode = document.getElementById('ag-grid-context-menu');\r\n        const screenW = window.innerWidth;          // 视窗宽度\r\n        const screenH = window.innerHeight;         // 视窗高度\r\n        const menuW = contextMenuNode.offsetWidth;        // 目标宽度\r\n        const menuH = contextMenuNode.offsetHeight;       // 目标高度\r\n\r\n        const right = (screenW - clientX) > menuW;\r\n        const left = !right;\r\n        const bottom = (screenH - clientY) > menuH;\r\n        const top = !bottom;\r\n        \r\n        let position = {}\r\n        if (right) { position.left = `${clientX}px`; }\r\n        if (left) { position.left = `${clientX - menuW}px`; }\r\n        if (bottom) { position.top = `${clientY}px`; }\r\n        if (top) { position.top = `${clientY - menuH}px`; }\r\n\r\n        return position;\r\n    }\r\n\r\n    // 列伸缩回调 (伸缩后可获取伸缩后的相关数据 可用于将来的保存布局)\r\n    onColumnResized = (params)=>{\r\n        // this.gridApi.resetRowHeights();\r\n    }\r\n\r\n    // 以某个字段计算行高（超过三张图片换行）\r\n    // getRowHeight = (params) => {\r\n    //     console.log(params);\r\n    //     return 28 * (Math.floor(params.data.receiverAddress.length / 35) + 1)\r\n    // }\r\n\r\n    // 右键项点击\r\n    onGridContextMenuItemClick = (menuItemObject) => {\r\n        const { domEvent } = menuItemObject;\r\n        domEvent.stopPropagation();\r\n        domEvent.preventDefault();\r\n        this.props.contextMenu.props.onClick(menuItemObject, this.targetRowDataObject)\r\n    }\r\n\r\n    componentDidMount(){\r\n        // 干掉主表格区域浏览器默认右键\r\n        document.getElementById('ag-grid-bolck').oncontextmenu = () => {\r\n            return false;\r\n        }\r\n        // 全局监听mouseup，关闭右键列表\r\n        document.addEventListener('mouseup', (e)=>{\r\n            // 判断右键菜单是否显示在可视区域内（目前仅根据top来做区分）\r\n            if(parseInt(this.state.top) > 0){\r\n                e.stopPropagation();\r\n                e.preventDefault();\r\n                this.setState({top:0, left: '-10000px'})\r\n            }\r\n        })\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        document.removeEventListener('mouseup',null);\r\n    }\r\n\r\n    render() {\r\n        const { pagination,contextMenu,loading,extraMaskHeight,columnDefs,rowData, defaultColDef} = this.props ;\r\n        const { top, left } = this.state;\r\n        const hidePagination = (typeof pagination === 'boolean' && pagination == false); // 不使用分页\r\n        const gridBodyHeight = hidePagination?`100%`:`calc(100% - 34px)`;                // 隐藏分页则100% 使用分页则减分页高度\r\n        const loadingHeight  = typeof extraMaskHeight === 'number'?`calc(100% + ${extraMaskHeight}px)`:`100%`; // 隐藏分页、loading遮罩增加extraHeight\r\n\r\n        // 添加行在总数据中的index\r\n        if(rowData){\r\n            const {page,pageSize,total} = pagination;\r\n            if(page*pageSize<total) {\r\n                rowData.forEach((item,index)=>{\r\n                    let totalIndex = pageSize*(page-1)+index+1;\r\n                    item['rowNum'] = totalIndex<10?\"0\"+totalIndex:totalIndex;\r\n                })\r\n            }\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                    <div\r\n                        className=\"ag-theme-balham ag-grid-block\"\r\n                        id=\"ag-grid-bolck\"\r\n                        style={{width:'100%',height:'100%'}}\r\n                    >\r\n                        <div style={{height:gridBodyHeight}}>\r\n                        <AgGridReact\r\n                            {...gridOptions}                                    // ag-grid基础默认配置\r\n\r\n                            {...this.props}                                     // 自定义props修改默认配置(对外暴露)\r\n                            defaultColDef={{...gridDefaultColDef,...defaultColDef}}                       // ag-grid默认列配置\r\n                            // rowData = {rowData}                              // 表格行数据\r\n                            // onGridReady={onGridReady}                        // 监听表格加载完毕\r\n                            // columnDefs={columnDefs}                             // 列配置细节\r\n                            // getRowHeight={this.getRowHeight}                 // 行高设置\r\n                            // context={context}                                // react组件的this\r\n                            // frameworkComponents={frameworkComponents}        // 注册react组件\r\n\r\n                            pagination={false}                                  // 完全屏蔽ag-grid的分页\r\n                        />\r\n                        </div>\r\n                        {hidePagination ? '' :<Pagination {...pagination}/>}\r\n                        <AgLoading loading={loading} style={{height:loadingHeight}}/>\r\n                    </div>\r\n\r\n                    {/*右键菜单*/}\r\n                    {contextMenu && React.cloneElement(contextMenu, {\r\n                        onClick: this.onGridContextMenuItemClick,\r\n                        mode: \"vertical\",\r\n                        id: 'ag-grid-context-menu',\r\n                        className: \"ag-grid-context-menu\",\r\n                        style: {top: top, left: left},\r\n                    })}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\n// props校验\r\nAgGrid.propTypes = {\r\n    rowData:PropTypes.array,\r\n    onGridReady:PropTypes.func,\r\n    loading:PropTypes.bool,\r\n    pagination:PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\r\n    extraHeight:PropTypes.number    // 扩展loading遮盖高度\r\n};\r\n\r\n// 默认属性\r\nAgGrid.defaultProps = {\r\n    rowData:null,\r\n    loading: false,\r\n};\r\n\r\nexport default AgGrid;","/**\r\n * Created by csz on 2019/7/1\r\n */\r\n\r\n// 中文\r\nexport default {\r\n    // 过滤菜单面板\r\n    page: \"页\",\r\n    more: \"更多\",\r\n    to: \"到\",\r\n    of: \"总数\",\r\n    next: \"下一页\",\r\n    last: \"上一页\",\r\n    first: \"首页\",\r\n    previous: \"上一页\",\r\n    loadingOoo: \"加载中...\",\r\n\r\n    // 过滤设置\r\n    selectAll: \"查询全部\",\r\n    searchOoo: \"查询...\",\r\n    blanks: \"空白\",\r\n\r\n    // 数字过滤和文本过滤\r\n    filterOoo: \"过滤...\",\r\n    applyFilter: \"应用过滤\",\r\n    equals: \"相等\",\r\n    notEqual: \"不相等\",\r\n\r\n    // 数字过滤\r\n    lessThan: \"小于\",\r\n    greaterThan: \"大于\",\r\n    lessThanOrEqual: \"小于等于\",\r\n    greaterThanOrEqual: \"大于等于\",\r\n    inRange: \"范围\",\r\n\r\n    // 文本过滤\r\n    contains: \"包含\",\r\n    notContains: \"不包含\",\r\n    startsWith: \"开始于\",\r\n    endsWith: \"结束于\",\r\n\r\n    // 过滤条件\r\n    andCondition: '并且',\r\n    orCondition: '或者',\r\n\r\n    // 默认组列的标题\r\n    group: \"组\",\r\n\r\n    // 工具面板\r\n    columns: \"列\",\r\n    filters: \"筛选\",\r\n    rowGroupColumns: \"laPivot Cols\",\r\n    rowGroupColumnsEmptyMessage: \"la drag cols to group\",\r\n    valueColumns: \"laValue Cols\",\r\n    pivotMode: \"laPivot-Mode\",\r\n    groups: \"laGroups\",\r\n    values: \"值\",\r\n    pivots: \"laPivots\",\r\n    valueColumnsEmptyMessage: \"la drag cols to aggregate\",\r\n    pivotColumnsEmptyMessage: \"la drag here to pivot\",\r\n    toolPanelButton: \"la tool panel\",\r\n\r\n    // 其他\r\n    noRowsToShow: \"数据为空\",\r\n\r\n    // 企业菜单\r\n    pinColumn: \"laPin Column\",\r\n    valueAggregation: \"laValue Agg\",\r\n    autosizeThiscolumn: \"laAutosize Diz\",\r\n    autosizeAllColumns: \"laAutsoie em All\",\r\n    groupBy: \"排序\",\r\n    ungroupBy: \"不排序\",\r\n    resetColumns: \"重置列\",\r\n    expandAll: \"展开全部\",\r\n    collapseAll: \"关闭\",\r\n    toolPanel: \"工具面板\",\r\n    export: \"导出\",\r\n    csvExport: \"导出为CSV格式文件\",\r\n    excelExport: \"导出到Excel\",\r\n    excelXmlExport: '导出到XML',\r\n\r\n    // 企业菜单 pinning\r\n    pinLeft: \"laPin &lt;&lt;\",\r\n    pinRight: \"laPin &gt;&gt;\",\r\n    noPin: \"laDontPin &lt;&gt;\",\r\n\r\n    // 企业菜单聚合和状态栏\r\n    sum: \"总数\",\r\n    min: \"最小值\",\r\n    max: \"最大值\",\r\n    none: \"无\",\r\n    count: \"总\",\r\n    average: \"平均值\",\r\n    filteredRows: 'laFiltered',\r\n    selectedRows: 'laSelected',\r\n    totalRows: 'laTotal Rows',\r\n    totalAndFilteredRows: 'laRows',\r\n\r\n    // 标准菜单\r\n    copy: \"复制\",\r\n    copyWithHeaders: \"携带表头复制\",\r\n    ctrlC: \"ctrl + C\",\r\n    paste: \"粘贴\",\r\n    ctrlV: \"ctrl + V\"\r\n};\r\n\r\n","import React, { Component } from 'react';\r\nimport {Icon, Select, message} from 'antd/lib/index'\r\nimport PropTypes from 'prop-types'\r\nimport './index.less'\r\n\r\nclass Pagination extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            page:props.page,                                                    // 显示当前在第几页\r\n            pageSizeOptions:props.pageSizeOptions,                              // 可选的每页大小数组\r\n            pageSize:props.pageSize||props.pageSizeOptions[0],                  // 每页大小\r\n            total:props.total,                                                  // 真实总条数\r\n        }\r\n    }\r\n\r\n    static defaultProps = {\r\n        page:1,\r\n        total:null,\r\n        pageSizeOptions: [50,100,200,500]\r\n    }\r\n\r\n    static propTypes = {\r\n        page:PropTypes.number,\r\n        total:PropTypes.number,\r\n        onPageSizeChange: PropTypes.func,\r\n        onPageChange: PropTypes.func,\r\n    }\r\n\r\n    // 改变每页大小 理论上当前页不变 但是如果 pageSize*page>total 则需要重新计算当前页 Select回调  （重点）\r\n    onPageSizeChange = (pageSize) => {\r\n        const {onPageSizeChange,total} = this.props;\r\n        let {page} = this.state;\r\n        if(total&&pageSize*page>total){\r\n            page = Math.ceil(total/pageSize);\r\n        }\r\n        this.setState({page,pageSize});\r\n        if(onPageSizeChange){\r\n            onPageSizeChange(page,pageSize);\r\n        }\r\n    }\r\n\r\n    // 上一页\r\n    onPrev = () => {\r\n        const {page,pageSize} = this.state;\r\n        const {onPageChange} = this.props;\r\n        if(page <= 1) {message.warning('已是第一页！');return}\r\n        this.setState({page:page-1},()=>{\r\n            if(onPageChange){\r\n                onPageChange(page-1,pageSize);\r\n            }\r\n        })\r\n    }\r\n\r\n    // 下一页\r\n    onNext = () => {\r\n        const {page,pageSize} = this.state;\r\n        const {total,onPageChange} = this.props;\r\n        const totalPage = Math.ceil(total/pageSize);\r\n        if( totalPage && page == totalPage ){message.warning('已是最后一页！');return}\r\n        this.setState({page:page + 1},()=>{\r\n            if(onPageChange){\r\n                onPageChange(page+1,pageSize);\r\n            }\r\n        })\r\n    }\r\n\r\n    // 跳到第一页\r\n    onFirst = () => {\r\n        const {page,pageSize} = this.state;\r\n        const {onPageChange} = this.props;\r\n        if(page == 1) {message.warning('已是第一页！');return}\r\n        this.setState({page:1},()=>{\r\n            if(onPageChange){\r\n                onPageChange(1,pageSize);\r\n            }\r\n        })\r\n    }\r\n\r\n    // 跳到最后一页 (重点）\r\n    onLast = () => {\r\n        const {page,pageSize} = this.state;\r\n        const {total,onPageChange} = this.props;\r\n        // 检验当前是否为最后一页\r\n        const totalPage = Math.ceil(total/pageSize);\r\n        if( totalPage && page == totalPage ){message.warning('已是最后一页！');return}\r\n\r\n        const pageLast = Math.ceil(total/pageSize);\r\n        this.setState({page:pageLast},()=>{\r\n            if(onPageChange){\r\n                onPageChange(pageLast,pageSize);\r\n            }\r\n        })\r\n    }\r\n\r\n    render(){\r\n        const {page,pageSizeOptions,pageSize} = this.state;\r\n        const {total} = this.props;\r\n\r\n        const totalPage = Math.ceil(total/pageSize);\r\n\r\n        return (<div className=\"antd-pagination\" style={{textAlign:'right'}}>\r\n            <div>\r\n                <span>每页记录条数</span>\r\n                <Select\r\n                    size=\"small\"\r\n                    style={{width:55,marginLeft:10}}\r\n                    value={pageSize}\r\n                    onChange={this.onPageSizeChange}\r\n                >\r\n                    {pageSizeOptions.map((item,i)=>{return <Select.Option key={i} value={item}>{item}</Select.Option>})}\r\n                </Select>\r\n            </div>\r\n\r\n            <div className=\"page-total-page\" style={{marginLeft:10}}>\r\n                <span className=\"text-middle\">共{total}条</span>\r\n                <span className=\"text-middle\" style={{marginLeft:10}}>{page}/{totalPage}页</span>\r\n            </div>\r\n            <div className=\"page-jump-to\" style={{marginLeft:20}}>\r\n                <Icon type=\"step-backward\" title=\"第一页\" onClick={this.onFirst} />\r\n                <Icon type=\"caret-left\" title=\"上一页\" onClick={this.onPrev} />\r\n                <Icon type=\"caret-right\" title=\"下一页\" onClick={this.onNext} />\r\n                <Icon type=\"step-forward\" title=\"最后页\" onClick={this.onLast} />\r\n            </div>\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default Pagination;","import React, { Component } from 'react';\r\nimport {Icon, Select, Input, message} from 'antd/lib/index'\r\nimport PropTypes from 'prop-types'\r\nimport './index.less'\r\n\r\nclass Pagination extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            page:props.page,                                        // 显示当前在第几页\r\n            pageSizeOptions:props.pageSizeOptions,                  // 可选的每页大小数组\r\n            pageSize:props.pageSize||props.pageSizeOptions[0],      // 每页大小\r\n            total:props.total,                                      // 真实总条数\r\n        }\r\n    }\r\n\r\n    static defaultProps = {\r\n        page:1,\r\n        total:null,\r\n        falseTotal:1000000,\r\n        pageSizeOptions: [50,100,200,500]\r\n    }\r\n\r\n    static propTypes = {\r\n        page:PropTypes.number,\r\n        total:PropTypes.number,\r\n        falseTotal:PropTypes.number,\r\n        onPageSizeChange: PropTypes.func,\r\n        onPageChange: PropTypes.func,\r\n        refreshTotal: PropTypes.func,\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps, nextContext) {\r\n        const {total,falseTotal,onPageChange,pageSize,page} = nextProps;\r\n        //（如果不是最后页 total始终为1000000）（如果当前页是最后页 total为真实总条数）\r\n        if(this.props.page == page && this.props.pageSize == pageSize) return false;\r\n        if(total&&total!=falseTotal){\r\n            let page = Math.ceil(total/this.state.pageSize);\r\n            this.setState({page},()=>{\r\n                if(onPageChange){\r\n                    onPageChange(page,pageSize);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // 改变每页大小 理论上当前页不变 但是如果 pageSize*page>total 则需要重新计算当前页 Select回调  （重点）\r\n    onPageSizeChange = (pageSize) => {\r\n        const {onPageSizeChange,total,falseTotal} = this.props;\r\n        let {page} = this.state;\r\n        if(total&&total!=falseTotal&&pageSize*page>total){\r\n            page = Math.ceil(total/pageSize);\r\n        }\r\n        this.setState({page,pageSize},()=>{\r\n            if(onPageSizeChange){\r\n                onPageSizeChange(page,pageSize);\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    // 上一页\r\n    onPrev = () => {\r\n        const {page,pageSize} = this.state;\r\n        const {onPageChange} = this.props;\r\n        if(page <= 1) {message.warning('已是第一页！');return}\r\n        this.setState({page:page-1},()=>{\r\n            if(onPageChange){\r\n                onPageChange(page-1,pageSize);\r\n            }\r\n        })\r\n    }\r\n\r\n    // 下一页\r\n    onNext = () => {\r\n        const {page,pageSize} = this.state;\r\n        const {total,onPageChange} = this.props;\r\n        const totalPage = Math.ceil(total/pageSize);\r\n        if( totalPage && page == totalPage ){message.warning('已是最后一页！');return}\r\n        this.setState({page:page + 1},()=>{\r\n            if(onPageChange){\r\n                onPageChange(page+1,pageSize);\r\n            }\r\n        })\r\n    }\r\n\r\n    // 跳到第一页\r\n    onFirst = () => {\r\n        const {page,pageSize} = this.state;\r\n        const {onPageChange} = this.props;\r\n        if(page == 1) {message.warning('已是第一页！');return}\r\n        this.setState({page:1},()=>{\r\n            if(onPageChange){\r\n                onPageChange(1,pageSize);\r\n            }\r\n        })\r\n    }\r\n\r\n    // 跳到最后一页 (重点）\r\n    onLast = () => {\r\n        const {page,pageSize} = this.state;\r\n        const {total,onPageChange,falseTotal} = this.props;\r\n        // 检验当前是否为最后一页\r\n        const totalPage = Math.ceil(total/pageSize);\r\n        if( totalPage && page == totalPage ){message.warning('已是最后一页！');return}\r\n\r\n        // 跳至最后页 使用falseTotal作为总页数 但是不需要将总页数显示\r\n        const pageLast = Math.ceil(falseTotal/pageSize);\r\n        if(onPageChange){\r\n            onPageChange(pageLast,pageSize);\r\n        }\r\n    }\r\n\r\n    // 输入第几页页码\r\n    onInputPage = (e) => {\r\n        e.preventDefault();\r\n        let page = e.currentTarget.value;\r\n        if(page >= 0){\r\n            this.setState({page});\r\n        }\r\n    }\r\n\r\n    // 回车查找输入页的数据 （重点）\r\n    onPagePressEnter = (e) =>{\r\n        e.preventDefault();\r\n        const {pageSize} = this.state;\r\n        const {total,onPageChange,falseTotal} = this.props;\r\n        const totalPage = Math.ceil(total/pageSize);\r\n        let page = e.currentTarget.value - 0;\r\n\r\n        if(totalPage&&total!=falseTotal){\r\n            if(page > totalPage){\r\n                this.setState({page: totalPage},()=>{\r\n                    if(onPageChange){\r\n                        onPageChange(totalPage,pageSize)\r\n                    }\r\n                })\r\n                message.warning(\"已设置为最大页数\")\r\n                return;\r\n            }else if(page == totalPage){\r\n                return;\r\n            }else if(page < totalPage){\r\n                if(page <= 1){\r\n                    page = 1\r\n                }\r\n            }\r\n        }\r\n\r\n        if(page){\r\n            this.setState({page},()=>{\r\n                if(onPageChange){\r\n                    onPageChange(page,pageSize)\r\n                }\r\n            });\r\n        }else{\r\n            this.setState({page: ''});\r\n            message.warning(\"请输入正确的页数!\")\r\n        }\r\n    }\r\n\r\n    // 刷新获取总条数\r\n    onRefreshTotal = () => {\r\n        const {refreshTotal} = this.props;\r\n        if(refreshTotal){\r\n            refreshTotal().then(total=>{\r\n                if(total){\r\n                    this.setState({total});\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const {page,pageSizeOptions,pageSize,total} = this.state;\r\n\r\n        const trueTotalPage = total?Math.ceil(total/pageSize):null;\r\n\r\n        return (<div className=\"erp-pagination\">\r\n            <div>\r\n                <Select\r\n                    size=\"small\"\r\n                    style={{width:100}}\r\n                    value={pageSize}\r\n                    onChange={this.onPageSizeChange}\r\n                >\r\n                    {pageSizeOptions.map((item,i)=>{return <Select.Option key={i} value={item}>{item + '条/页'}</Select.Option>})}\r\n                </Select>\r\n            </div>\r\n            <div className=\"page-jump-to\">\r\n                <Icon type=\"step-backward\" title=\"第一页\" onClick={this.onFirst} />\r\n                <Icon type=\"caret-left\" title=\"上一页\" onClick={this.onPrev} />\r\n                <span>\r\n          第 <Input\r\n                    // ref={input => this.pageInput = input} />\r\n                    size='small'\r\n                    style={{width:'50px'}}\r\n                    onChange={this.onInputPage}\r\n                    onPressEnter={this.onPagePressEnter}\r\n                    title={page}\r\n                    value={page}\r\n                /> 页\r\n        </span>\r\n                <Icon type=\"caret-right\" title=\"下一页\" onClick={this.onNext} />\r\n                <Icon type=\"step-forward\" title=\"最后页\" onClick={this.onLast} />\r\n            </div>\r\n            <div className=\"page-total\">\r\n        <span>\r\n          <span className=\"text-middle\">共</span> <Input\r\n            className=\"text-middle\"\r\n            size='small'\r\n            addonAfter={<Icon\r\n                className=\"redo-btn\"\r\n                size=\"small\"\r\n                type=\"redo\"\r\n                onClick={this.onRefreshTotal}\r\n            />}\r\n            title={total}\r\n            style={{width:80}}\r\n            value={total}\r\n            readOnly\r\n        /> <span className=\"text-middle\">条记录</span>\r\n        </span>\r\n            </div>\r\n            <div className=\"page-total-page\">\r\n        <span>\r\n          <span className=\"text-middle\">共</span>\r\n          <Input\r\n              className=\"text-middle\"\r\n              size='small'\r\n              style={{width:'50px'}}\r\n              title={trueTotalPage}\r\n              value={trueTotalPage}\r\n              readOnly\r\n          />\r\n          <span className=\"text-middle\">页</span>\r\n        </span>\r\n            </div>\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default Pagination;","import React, { Component } from 'react';\r\nimport CerpPagination from './cerp-pagination';\r\nimport AntdPagination from './antd-pagination';\r\n\r\nexport default class Pagination extends Component{\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n\r\n  render(){\r\n    const {type} = this.props;\r\n    return type == 'cerp'?<CerpPagination {...this.props}/>:<AntdPagination {...this.props}/>;\r\n  }\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAKA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtBA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AACA;AAhBA;AAmBA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAFA;AALA;AACA;AAUA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAyBA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AA5CA;AAkDA;AACA;AACA;AACA;AACA;AAEA;AAxDA;AACA;AADA;AAyDA;AAEA;AACA;AACA;AAAA;AACA;AACA;AA7DA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AACA;AACA;AAZA;AAPA;AAqBA;AACA;AACA;;;AAyCA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AALA;AASA;;;;AA5IA;AACA;AACA;AA8IA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AAFA;AAKA;;;;;;;;;;;;ACjNA;AAAA;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAlGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAwBA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAnCA;AAqCA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AA/CA;AAiDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AA5DA;AA8DA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAxEA;AA0EA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAtFA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AALA;AAFA;AAQA;AACA;;;AAgxHA;AACA;AADA;AAYA;AACA;AACA;AAHA;AACA;AAZA;AAkBA;AACA;AACA;AACA;AAJA;AACA;AAyGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChIA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAyCA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAtDA;AAwDA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAlEA;AAoEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AA/EA;AAiFA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AA3FA;AA6FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AA1GA;AA6GA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAnHA;AAsHA;AADA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAzJA;AA2JA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAnKA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AALA;AAFA;AAQA;AACA;;;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA+HA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AAzOA;AACA;AADA;AAYA;AACA;AACA;AACA;AAJA;AACA;AAZA;AAmBA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAyNA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjPA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AAEA;AACA;;;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AARA;AACA;;;;;;;;;;;;;;;;A","sourceRoot":""}