{"version":3,"file":"1.js","sources":["webpack:///./components/splitter/index.js"],"sourcesContent":["import SplitterLayout from 'react-splitter-layout'\r\nimport 'react-splitter-layout/lib/index.css'\r\nimport React, { Component } from 'react'\r\nimport { Icon } from 'antd'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport './index.less'\r\n\r\nconst splitterLineSize = 16,\r\n    // 缓存中的标识，含有'disabledDrag'时只有主板块\r\n    disabledDrag = 'disabledDrag';\r\n\r\nexport default class Splitter extends Component {\r\n    static defaultProps = {\r\n        storageName: null,\r\n        primaryIndex: 0,      // 默认主板块是第一个\r\n        primaryMinSize: 40,   // 默认主板块最小尺寸\r\n        secondaryMinSize: 40, // 默认次板块最小尺寸\r\n        vertical: false,      // 默认水平方向\r\n        showFold: false,      // 是否需要折叠区域，默认不显示\r\n    }\r\n    constructor(props) {\r\n        super(props)\r\n        props.showFold ? this.foldSize = 26 : this.foldSize = 0\r\n        this.state = {\r\n            primaryMinSize: props.primaryMinSize,\r\n            secondaryMinSize: props.secondaryMinSize,\r\n            // 次板块的索引。默认左边为主板块0， 右边为次板块1。通过修改 width 属性修改两块的大小，width 属性始终在次板块上 \r\n            secondaryIndex: this.secondaryIndex(),\r\n            secondaryInitialSize: this.getInitSize(),\r\n            // 当折叠时显示，展开时不显示。\r\n            // visibleFold: false,\r\n            // 是否显示次板块内容 \r\n            visibleContent: true,\r\n        }\r\n        this.splitter = React.createRef()\r\n    }\r\n    secondaryIndex = () => {\r\n        let secondaryIndex\r\n        this.props.primaryIndex === 0 ? secondaryIndex = 1 : secondaryIndex = 0\r\n        return secondaryIndex\r\n    }\r\n    // {return} 返回次板块的值\r\n    // 1. if 当存储的值存在且包含'disabledDrag'，此时次板块尺寸为0，需要禁止拖拽\r\n    // 2. elseif 存储的值存在，取值\r\n    // 3. elseif 当父组件传默认值，取父组件的值\r\n    // 4. 父组件没有默认值，返回 undefined\r\n    getInitSize = () => {\r\n        this.storageValue = localStorage.getItem(this.props.storageName)\r\n        const { secondaryInitialSize } = this.props\r\n        if (this.storageValue && this.storageValue.includes(disabledDrag)) {\r\n            this.disabledDrag = true\r\n            return this.foldSize\r\n        } else if (this.storageValue) {\r\n            return parseInt(this.storageValue)\r\n        } else if (secondaryInitialSize) {\r\n            return parseInt(secondaryInitialSize)\r\n        } else {\r\n            return undefined\r\n        }\r\n    }\r\n    addButtonEvent = () => {\r\n        let direction, opposite\r\n        const { vertical } = this.props\r\n        const { secondaryIndex } = this.state\r\n        if (vertical) {\r\n            if (secondaryIndex === 1) {\r\n                if (this.storageValue && this.storageValue.includes(disabledDrag)) {\r\n                    direction = 'top'\r\n                    opposite = 'bottom'\r\n                } else {\r\n                    direction = 'bottom'\r\n                    opposite = 'top'\r\n                }\r\n            } else if (secondaryIndex === 0) {\r\n                if (this.storageValue && this.storageValue.includes(disabledDrag)) {\r\n                    direction = 'bottom'\r\n                    opposite = 'top'\r\n                } else {\r\n                    direction = 'top'\r\n                    opposite = 'bottom'\r\n                }\r\n            }\r\n            // 垂直预览的 className\r\n            this.previewClassName = 'preview-secondaryDom-vertical'\r\n            this.splitterButton.onclick = () => this.onSplitterButton(direction, opposite)\r\n        } else {\r\n            if (secondaryIndex === 1) {\r\n                if (this.storageValue && this.storageValue.includes(disabledDrag)) {\r\n                    direction = 'left'\r\n                    opposite = 'right'\r\n                } else {\r\n                    direction = 'right'\r\n                    opposite = 'left'\r\n                }\r\n            } else if (secondaryIndex === 0) {\r\n                if (this.storageValue && this.storageValue.includes(disabledDrag)) {\r\n                    direction = 'right'\r\n                    opposite = 'left'\r\n                } else {\r\n                    direction = 'left'\r\n                    opposite = 'right'\r\n                }\r\n            }\r\n            // 水平预览的 className\r\n            this.previewClassName = 'preview-secondaryDom-horizontal'\r\n            this.splitterButton.onclick = () => this.onSplitterButton(direction, opposite)\r\n        }\r\n        this.splitterButton.classList.add(direction)\r\n    }\r\n    onSplitterButton = (direction, opposite) => {\r\n        const { storageName } = this.props\r\n        const { visibleFold, visibleContent } = this.state\r\n        this.setState({ visibleFold: !visibleFold, visibleContent: !visibleContent })\r\n\r\n        if (this.secondaryDom.style[this.size] === `${this.foldSize}px`) {\r\n            this.disabledDrag = false\r\n            this.secondaryDom.style[this.size] = `${this[`secondary${this.upSize}`]}px`  // this.secondaryWidth, this.secondaryHeight\r\n            this.splitterLine.style.cssText = 'pointer-events: auto'\r\n        } else {\r\n            this.disabledDrag = true\r\n            // 存储次板块宽度，折叠宽度设置为提示面板的宽度\r\n            this[`secondary${this.upSize}`] = parseInt(this.secondaryDom.style[this.size])\r\n            // 收起次板块时保存尺寸，用于初次渲染时还原\r\n            storageName && localStorage.setItem(storageName, `${this[`secondary${this.upSize}`]}${disabledDrag}`)\r\n            this.secondaryDom.style[this.size] = `${this.foldSize}px`\r\n            this.splitterLine.style.cssText = 'pointer-events: none'\r\n            this.splitterButton.style.cssText = 'pointer-events: auto'\r\n            // fix：修改宽度为0，调整浏览器高度后，次板块宽度会改变为最小宽度。\r\n            this.setState({ secondaryMinSize: this.foldSize })\r\n        }\r\n\r\n        this.secondaryDom.classList.remove(this.previewClassName)\r\n        this.splitterButton.classList.remove(direction)\r\n        this.splitterButton.classList.add(opposite)\r\n        this.splitterButton.onclick = () => this.onSplitterButton(opposite, direction)\r\n\r\n    }\r\n    onFold = (direction) => {\r\n        const { visibleContent } = this.state\r\n        this.setState({ visibleContent: !visibleContent })\r\n        // 当次板块内容显示时，点击折叠收起内容。尺寸等于折叠面板\r\n        if (visibleContent) { \r\n            this.secondaryDom.style.cssText = `${this.size}: ${this.foldSize}px`\r\n            setTimeout(() => {\r\n                this.secondaryDom.classList.remove(this.previewClassName)\r\n            })\r\n        } else { // 当次板块内容不显示时，点击展开显示内容。尺寸还原\r\n            this.secondaryDom.classList.add(this.previewClassName)\r\n            this.secondaryDom.style.cssText = `${this.size}: ${this[`secondary${this.upSize}`]}` // width: this.secondaryWidth\r\n        }\r\n        // 设置展开时预览窗口的位置\r\n        document.querySelector(`.${this.previewClassName}`).style[`${direction}`] = 0   \r\n    }\r\n    // fix：解决不可拖拽时，按钮可拖拽的问题\r\n    onDragStart = () => {\r\n        let primaryMinSize, secondaryMinSize\r\n        // 当分割线不可拖拽时，设置主板块和次板块的最小尺寸，使之拖不动\r\n        if (this.disabledDrag) {\r\n            primaryMinSize = this.splitterSize - splitterLineSize - this.foldSize\r\n            secondaryMinSize = this.foldSize\r\n        } else {\r\n            primaryMinSize = this.props.primaryMinSize\r\n            secondaryMinSize = this.props.secondaryMinSize\r\n        }\r\n        this.setState({ primaryMinSize, secondaryMinSize })\r\n        this.props.onDragStart && this.props.onDragStart()\r\n    }\r\n    getSplitterSize = () => {\r\n        this.splitterSize = this.splitter.current.container[`client${this.upSize}`]\r\n        // 不能拖动时，次板块是0，\r\n        if (this.storageValue && this.storageValue.includes(disabledDrag)) {\r\n            // fix: 设置次板块最小尺寸解决改变页面高度位置变化的问题\r\n            this.setState({\r\n                secondaryMinSize: this.foldSize,\r\n                visibleContent: false,\r\n            })\r\n            // 设置缓存中的尺寸用于还原\r\n            this[`secondary${this.upSize}`] = parseInt(this.storageValue)\r\n            this.splitterLine.style.cssText = 'pointer-events: none'\r\n            this.splitterButton.style.cssText = 'pointer-events: auto'\r\n        }\r\n    }\r\n    setGlobalVar = () => {\r\n        const { vertical } = this.props\r\n        const { secondaryIndex } = this.state\r\n        if (vertical) {\r\n            this.size = 'height'\r\n            this.upSize = 'Height'\r\n        } else {\r\n            this.size = 'width'\r\n            this.upSize = 'Width'\r\n        }\r\n        // 将分割线上的按钮 push 到分割线中\r\n        this.splitterLine = document.querySelector('.layout-splitter')\r\n        this.secondaryDom = document.querySelectorAll('.layout-pane')[secondaryIndex]\r\n        let img = document.createElement('img')\r\n        img.className = 'splitter-button'\r\n        // img.src = require('../../static/splitter-button.svg')\r\n        this.splitterLine.appendChild(img)\r\n        this.splitterButton = document.querySelector('.splitter-button')\r\n        this.addButtonEvent()\r\n    }\r\n    isVisibleFold = () => {\r\n        this.storageValue = localStorage.getItem(this.props.storageName)\r\n        if (this.storageValue && this.storageValue.includes(disabledDrag)) {\r\n            this.setState({ visibleFold: true })\r\n        } else {\r\n            this.setState({ visibleFold: false })\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.setGlobalVar()\r\n        // 获取主板块次板块分割线一共占据的尺寸   \r\n        this.getSplitterSize()\r\n        this.isVisibleFold()\r\n    }\r\n    componentWillUnmount() {\r\n        const { storageName } = this.props\r\n        // disabledDrag 用来标识次板块尺寸为 0，此时 1. 保存上次的尺寸用于还原。2. 分割线不可拖拽。\r\n        if (storageName) {\r\n            if (this.secondaryDom.style[this.size] === `${this.foldSize}px`) {\r\n                localStorage.setItem(storageName, `${this[`secondary${this.upSize}`]}${disabledDrag}`)\r\n            } else {\r\n                localStorage.setItem(storageName, this.secondaryDom.style[this.size])\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        const { vertical, foldText, showFold } = this.props\r\n        const { primaryMinSize, secondaryMinSize, secondaryInitialSize, secondaryIndex, visibleFold, visibleContent } = this.state\r\n        const childrenArr = React.Children.toArray(this.props.children)\r\n        const itemClassNames = classNames('splitter-item', vertical ? 'splitter-vertical' : 'splitter-horizontal')\r\n        // 主板块内容一直显示；当点击收齐时，次板块内容不显示。\r\n        const visibleChildren0 = (secondaryIndex === 1 || (secondaryIndex === 0 && visibleContent))\r\n        const visibleChildren1 = (secondaryIndex === 0 || (secondaryIndex === 1 && visibleContent))\r\n        return (\r\n            <SplitterLayout\r\n                {...this.props}\r\n                primaryMinSize={primaryMinSize}\r\n                secondaryMinSize={secondaryMinSize}\r\n                secondaryInitialSize={secondaryInitialSize}\r\n                onDragStart={this.onDragStart}\r\n                customClassName={this.props.customClassName ? `splitter-componented ${this.props.customClassName}` : 'splitter-componented'}\r\n                ref={this.splitter}\r\n            >\r\n                <div className={itemClassNames}>\r\n                    {\r\n                        showFold\r\n                        &&\r\n                        <>\r\n                            {secondaryIndex === 0 && visibleFold && !vertical && <div className=\"fold-panel fold-panel-left\" onClick={() => this.onFold('left')}>\r\n                                <Icon type=\"double-right\" />\r\n                                {foldText && <p>{foldText}</p>}\r\n                            </div>}\r\n                            {secondaryIndex === 0 && visibleFold && vertical && <div className=\"fold-panel fold-panel-top\" onClick={() => this.onFold('top')}>\r\n                                <Icon type=\"double-right\" />\r\n                                {foldText && <p>{foldText}</p>}\r\n                            </div>}\r\n                        </>\r\n                    }\r\n                    {visibleChildren0 && childrenArr[0]}\r\n                </div>\r\n                <div className={itemClassNames}>\r\n                    {visibleChildren1 && childrenArr[1]}\r\n                    {\r\n                        showFold\r\n                        &&\r\n                        <>\r\n                            {secondaryIndex === 1 && visibleFold && !vertical && <div className=\"fold-panel fold-panel-right\" onClick={() => this.onFold('right')}>\r\n                                <Icon type=\"double-left\" />\r\n                                {foldText && <p>{foldText}</p>}\r\n                            </div>}\r\n                            {secondaryIndex === 1 && visibleFold && vertical && <div className=\"fold-panel fold-panel-bottom\" onClick={() => this.onFold('bottom')}>\r\n                                <Icon type=\"double-left\" />\r\n                                {foldText && <p>{foldText}</p>}\r\n                            </div>}\r\n                        </>\r\n                    }\r\n                </div>\r\n            </SplitterLayout>\r\n        );\r\n    }\r\n}\r\n\r\nSplitter.propTypes = {\r\n    showFold: PropTypes.bool,\r\n    storageName: PropTypes.string,\r\n    foldText: PropTypes.string,\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;;;;;AASA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAiBA;AACA;AACA;AACA;AACA;AArBA;AA2BA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxCA;AAyCA;AADA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAzFA;AAyFA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AArHA;AAqHA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AArIA;AAuIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAnJA;AAoJA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAlKA;AAkKA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAtLA;AAuLA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AA5LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AAdA;AAeA;AACA;;;AA8KA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;;AA9QA;AACA;AADA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAPA;AACA;AAFA;AAiRA;AACA;AACA;AACA;AAHA;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}